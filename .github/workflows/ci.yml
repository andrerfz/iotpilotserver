# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Run linter
        working-directory: ./app
        run: npm run lint

      - name: Run type check
        working-directory: ./app
        run: npm run type-check

      - name: Run tests
        working-directory: ./app
        run: npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./app/coverage
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Run security audit
        working-directory: ./app
        run: npm audit --audit-level=high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-installer:
    name: Build Pi Packages
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        arch: [armv6, arm64v8]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.arch }} package
        run: |
          if [ "${{ matrix.arch }}" = "armv6" ]; then
            ./docker/node/build-for-pi-zero.sh
          else
            ./docker/node/build-for-pi-3-arm64.sh
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iotpilot-${{ matrix.arch }}-package
          path: packages/${{ matrix.arch }}/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging.iotpilot.app

    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/iotpilot
            git pull origin develop
            docker compose pull
            docker compose up -d
            sleep 30
            curl -f https://staging.iotpilot.app/api/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://iotpilot.app

    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/iotpilot
            git pull origin main
            docker compose pull
            docker compose up -d
            sleep 30
            curl -f https://iotpilot.app/api/health

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-installer]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release packages
        run: |
          mkdir -p release
          
          # Create Pi Zero package
          cd artifacts/iotpilot-armv6-package
          tar -czf ../../release/iotpilot-pi-zero-v${{ github.event.release.tag_name }}.tar.gz *
          cd ../..
          
          # Create Pi 3/4 package
          cd artifacts/iotpilot-arm64v8-package
          tar -czf ../../release/iotpilot-pi-3-4-v${{ github.event.release.tag_name }}.tar.gz *
          cd ../..
          
          # Create installation script bundle
          tar -czf release/iotpilot-scripts-v${{ github.event.release.tag_name }}.tar.gz scripts/
          
          # Create checksums
          cd release
          sha256sum * > checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/iotpilot-pi-zero-v${{ github.event.release.tag_name }}.tar.gz
            release/iotpilot-pi-3-4-v${{ github.event.release.tag_name }}.tar.gz
            release/iotpilot-scripts-v${{ github.event.release.tag_name }}.tar.gz
            release/checksums.txt
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.event.release.tag_name, '-') }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        with:
          args: 'ðŸš€ IotPilot v${{ github.sha }} has been deployed to production! https://iotpilot.app'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}