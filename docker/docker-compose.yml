version: '3.8'

services:
  # Tailscale Sidecar - Core networking component
  tailscale:
    image: tailscale/tailscale:latest
    container_name: iotpilot-tailscale
    hostname: iotpilot-server
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTH_KEY}
      - TS_HOSTNAME=iotpilot-server
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ACCEPT_DNS=true
      - TS_EXTRA_ARGS=--advertise-tags=tag:server --accept-routes
    volumes:
      - tailscale-state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    restart: unless-stopped
    networks:
      - iotpilot-network
    command: tailscaled

  # Main IotPilot Application
  iotpilot-app:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        - NODE_ENV=production
    container_name: iotpilot-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - GRAFANA_URL=http://grafana:3000
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - LOKI_URL=http://loki:3100
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - DEVICE_API_KEY=${DEVICE_API_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - DOMAIN=${DOMAIN}
      - TAILSCALE_DOMAIN=${NEXT_PUBLIC_TAILSCALE_DOMAIN}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - tailscale-socket:/tmp/tailscale
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      tailscale:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - iotpilot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.iotpilot.rule=Host(\`${DOMAIN}\`) || Host(\`${TAILSCALE_DOMAIN}\`)"
      - "traefik.http.routers.iotpilot.tls=true"
      - "traefik.http.routers.iotpilot.tls.certresolver=letsencrypt"
      - "traefik.http.services.iotpilot.loadbalancer.server.port=3000"
      - "traefik.http.routers.iotpilot.middlewares=compression,rate-limit,security-headers"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iotpilot-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - iotpilot-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: iotpilot-redis
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - iotpilot-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: iotpilot-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_DOMAIN=${DOMAIN_TUNEL}
      - GF_SERVER_ROOT_URL=https://${DOMAIN_TUNEL}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=${POSTGRES_DB}
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - GF_DATABASE_SSL_MODE=disable
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      loki:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - iotpilot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(\`${DOMAIN}\`) && PathPrefix(\`/grafana\`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=compression,security-headers"

  # InfluxDB for time-series metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: iotpilot-influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
      - DOCKER_INFLUXDB_INIT_RETENTION=8760h
      - INFLUXD_LOG_LEVEL=warn
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - ./influxdb/config:/etc/influxdb2:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - iotpilot-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.8
    container_name: iotpilot-loki
    volumes:
      - ./loki/config.yml:/etc/loki/config.yaml:ro
      - loki-data:/tmp/loki
    command: -config.file=/etc/loki/config.yaml
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - iotpilot-network

  # Traefik reverse proxy with Tailscale integration
  traefik:
    image: traefik:v3.0
    container_name: iotpilot-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - ACME_EMAIL=${ACME_EMAIL}
      - DOMAIN=${DOMAIN}
      - TRAEFIK_AUTH=${TRAEFIK_AUTH}
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/etc/traefik/acme
      - tailscale-socket:/tmp/tailscale:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - iotpilot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(\`${DOMAIN}\`) && PathPrefix(\`/traefik\`)"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=auth"

  # Prometheus for additional metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: iotpilot-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--log.level=warn'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - iotpilot-network

volumes:
  tailscale-state:
    driver: local
  tailscale-socket:
    driver: local
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  influxdb-data:
    driver: local
  loki-data:
    driver: local
  traefik-certs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  iotpilot-network:
    name: iotpilot-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: iotpilot0
      com.docker.network.driver.mtu: 1500
